{
  "amplifier_model": "SR830",
  "available_settings": [
    "Reference Phase Shift",
    "Reference Source",
    "Reference Frequency",
    "Reference Trigger",
    "Detection Harmonic",
    "Sine Output Amplitude",
    "Input Configuration",
    "Input Shield Grounding",
    "Input Coupling",
    "Input Line Notch Filter Status",
    "Sensitivity",
    "Dynamic Reserve Mode",
    "Time Constant",
    "Low Pass Filter Slope",
    "Synchronous Filter Status",
    "CH1 display settings",
    "CH2 display settings",
    "CH1 Output Quantity",
    "CH2 Output Quantity",
    "X output settings",
    "Y output settings",
    "R output settings",
    "Aux Out 1",
    "Aux Out 2",
    "Aux Out 3",
    "Aux Out 4",
    "Data Storage Sample Rate",
    "End of Buffer Mode",
    "Data Storage Trigger Start Mode"
  ],
  "settings": {
    "ref.phase-shift": {
      "display_name": "Reference Phase Shift",
      "type": "double",
      "values": [-180, 180],
      "unit": "deg",
      "desc": "",
      "set_cmd": "PHAS %f\0",
      "get_cmd": "PHAS?\0"
    },
    "ref.source": {
      "display_name": "Reference Source",
      "type": "list",
      "values": {
        0: "external",
        1: "internal"
      },
      "unit": "-",
      "desc": "",
      "set_cmd": "FMOD %d\0",
      "get_cmd": "FMOD?\0"
    },
    "ref.freq": {
      "display_name": "Reference Frequency",
      "type": "double",
      "values": [0.001, 102000],
      "unit": "Hz",
      "desc": "",
      "set_cmd": "FREQ %f\0",
      "get_cmd": "FREQ?\0"
    },
    "ref.trig": {
      "display_name": "Reference Trigger",
      "type": "list",
      "values": [
        [0, "Sine zero crossing"],
        [1, "TTL rising edge"],
        [2, "TTL falling edge"]
      ],
      "unit": "-",
      "desc": "",
      "set_cmd": "RSLP %d\0",
      "get_cmd": "RSLP?\0"
    },
    "out.det-harm": {
      "display_name": "Detection Harmonic",
      "type": "int",
      "values": [1, 19999],
      "unit": "-",
      "desc": "",
      "set_cmd": "HARM %d\0",
      "get_cmd": "HARM?\0"
    },
    "ref.ampl": {
      "display_name": "Sine Output Amplitude",
      "type": "double",
      "values": [0.004, 5.0],
      "unit": "Vrms",
      "desc": "",
      "set_cmd": "SLVL %f\0",
      "get_cmd": "SLVL?\0"
    },
    "input.config": {
      "display_name": "Input Configuration",
      "type": "list",
      "values": [
        [0, "A"],
        [1, "A-B"],
        [2, "I (1 megaohm)"],
        [3, "I (100 megaohm)"]
      ],
      "unit": "-",
      "desc": "",
      "set_cmd": "ISRC %d\0",
      "get_cmd": "ISRC?\0"
    },
    "": {
      "display_name": ,
      "type": ,
      "values": ,
      "unit": "",
      "desc": "",
      "set_cmd": ,
      "get_cmd": 
    },
  ],
  "categories": [
    {
      "name": "Reference Signal",
      "settings": [
        "ref.source",
        "ref.freq",
        "ref.phase-shift",
        "ref.trig"
      ]
    },
    {
      "name": "Output",
      "settings": [
        "out.det-harm"
      ]
    }
  ]
}
  
  o = new Option("", "IGND %d", "IGND?");
  l = new ListParameter("Input Shield Grounding", "-", 0, 1);
  l->setDisplayValue(0, "Float");
  l->setDisplayValue(1, "Ground");
  o->addParameter(0, l);
  settings["Input Shield Grounding"] = *o;
  
  o = new Option("", "ICPL %d", "ICPL?");
  l = new ListParameter("Input Coupling", "-", 0, 1);
  l->setDisplayValue(0, "AC");
  l->setDisplayValue(1, "DC");
  o->addParameter(0, l);
  settings["Input Coupling"] = *o;
  
  o = new Option("", "ILIN %d", "ILIN?");
  l = new ListParameter("Input Line Notch Filter Status", "-", 0, 1);
  l->setDisplayValue(0, "No Filters");
  l->setDisplayValue(1, "Line Notch In");
  l->setDisplayValue(2, "2xLine Notch In");
  l->setDisplayValue(3, "Both Notch Filters In");
  o->addParameter(0, l);
  settings["Input Line Notch Filter Status"] = *o;
  
  o = new Option("", "SENS %d", "SENS?");
  l = new ListParameter("Sensitivity", "-", 0, 26);
  l->setDisplayValue(0, "2 nV (fA)");
  l->setDisplayValue(1, "5 nV (fA)");
  l->setDisplayValue(2, "10 nV (fA)");
  l->setDisplayValue(3, "20 nV (fA)");
  l->setDisplayValue(4, "50 nV (fA)");
  l->setDisplayValue(5, "100 nV (fA)");
  l->setDisplayValue(6, "200 nV (fA)");
  l->setDisplayValue(7, "500 nV (fA)");
  l->setDisplayValue(8, "1 uV (pA)");
  l->setDisplayValue(9, "2 uV (pA)");
  l->setDisplayValue(10, "5 uV (pA)");
  l->setDisplayValue(11, "10 uV (pA)");
  l->setDisplayValue(12, "20 uV (pA)");
  l->setDisplayValue(13, "50 uV (pA)");
  l->setDisplayValue(14, "100 uV (pA)");
  l->setDisplayValue(15, "200 uV (pA)");
  l->setDisplayValue(16, "500 uV (pA)");
  l->setDisplayValue(17, "1 mV (nA)");
  l->setDisplayValue(18, "2 mV (nA)");
  l->setDisplayValue(19, "5 mV (nA)");
  l->setDisplayValue(20, "10 mV (nA)");
  l->setDisplayValue(21, "20 mV (nA)");
  l->setDisplayValue(22, "50 mV (nA)");
  l->setDisplayValue(23, "100 mV (nA)");
  l->setDisplayValue(24, "200 mV (nA)");
  l->setDisplayValue(25, "500 mV (nA)");
  l->setDisplayValue(26, "1 V (uA)");
  o->addParameter(0, l);
  settings["Sensitivity"] = *o;
  
  o = new Option("", "RMOD %d", "RMOD?");
  l = new ListParameter("Dynamic Reserve Mode", "-", 0, 2);
  l->setDisplayValue(0, "High Reserve");
  l->setDisplayValue(1, "Normal");
  l->setDisplayValue(2, "Low Noise");
  o->addParameter(0, l);
  settings["Dynamic Reserve Mode"] = *o;
  
  o = new Option("", "OFLT %d", "OFLT?");
  l = new ListParameter("Time Constant", "-", 0, 19);
  l->setDisplayValue(0, "10 us");
  l->setDisplayValue(1, "30 us");
  l->setDisplayValue(2, "100 us");
  l->setDisplayValue(3, "300 us");
  l->setDisplayValue(4, "1 ms");
  l->setDisplayValue(5, "3 ms");
  l->setDisplayValue(6, "10 ms");
  l->setDisplayValue(7, "30 ms");
  l->setDisplayValue(8, "100 ms");
  l->setDisplayValue(9, "300 ms");
  l->setDisplayValue(10, "1 s");
  l->setDisplayValue(11, "3 s");
  l->setDisplayValue(12, "10 s");
  l->setDisplayValue(13, "30 s");
  l->setDisplayValue(14, "100 s");
  l->setDisplayValue(15, "300 s");
  l->setDisplayValue(16, "1 ks");
  l->setDisplayValue(17, "3 ks");
  l->setDisplayValue(18, "10 ks");
  l->setDisplayValue(19, "30 ks");
  o->addParameter(0, l);
  settings["Time Constant"] = *o;
  
  o = new Option("", "OFSL %d", "OFSL?");
  l = new ListParameter("Low Pass Filter Slope", "-", 0, 3);
  l->setDisplayValue(0, "6 dB/oct");
  l->setDisplayValue(1, "12 dB/oct");
  l->setDisplayValue(2, "18 dB/oct");
  l->setDisplayValue(3, "24 dB/oct");
  o->addParameter(0, l);
  settings["Low Pass Filter Slope"] = *o;
  
  o = new Option("", "SYNC %d", "SYNC?");
  l = new ListParameter("Synchronous Filter Status", "-", 0, 1);
  l->setDisplayValue(0, "No synchronous filtering");
  l->setDisplayValue(1, "Synchronous filtering below 200Hz");
  o->addParameter(0, l);
  settings["Synchronous Filter Status"] = *o;
  
  o = new Option("CH1 ", "DDEF 1,%d,%d", "DDEF? 1");
  l = new ListParameter("Displayed Value", "-", 0, 4);
  l->setDisplayValue(0, "X");
  l->setDisplayValue(1, "R");
  l->setDisplayValue(2, "X Noise");
  l->setDisplayValue(3, "Aux In 1");
  l->setDisplayValue(4, "Aux In 2");
  ListParameter* l2 = new ListParameter("Ratio", "-", 0, 2);
  l2->setDisplayValue(0, "none");
  l2->setDisplayValue(1, "Aux In 1");
  l2->setDisplayValue(2, "Aux In 2");
  o->addParameter(0, l);
  o->addParameter(1, l2);
  settings["CH1 display settings"] = *o;
  
  o = new Option("CH2 ", "DDEF 2,%d,%d", "DDEF? 2");
  l = new ListParameter("Displayed Value", "-", 0, 4);
  l->setDisplayValue(0, "Y");
  l->setDisplayValue(1, "Theta");
  l->setDisplayValue(2, "Y Noise");
  l->setDisplayValue(3, "Aux In 3");
  l->setDisplayValue(4, "Aux In 4");
  l2 = new ListParameter("Ratio", "-", 0, 2);
  l2->setDisplayValue(0, "none");
  l2->setDisplayValue(1, "Aux In 3");
  l2->setDisplayValue(2, "Aux In 4");
  o->addParameter(0, l);
  o->addParameter(1, l2);
  settings["CH2 display settings"] = *o;
  
  o = new Option("CH1 ", "FPOP 1,%d", "FPOP? 1");
  l = new ListParameter("Output Quantity", "-", 0, 1);
  l->setDisplayValue(0, "CH 1 Display");
  l->setDisplayValue(1, "X");
  o->addParameter(0, l);
  settings["CH1 Output Quantity"] = *o;
  
  o = new Option("CH2 ", "FPOP 2,%d", "FPOP? 2");
  l = new ListParameter("Output Quantity", "-", 0, 1);
  l->setDisplayValue(0, "CH 2 Display");
  l->setDisplayValue(1, "Y");
  o->addParameter(0, l);
  settings["CH2 Output Quantity"] = *o;
  
  o = new Option("X Output ", "OEXP 1,%f,%d", "OEXP? 1");
  d = new DoubleParameter("Offset", "%", -105, 105);
  l = new ListParameter("Expand", "-", 0, 2);
  l->setDisplayValue(0, "No Expand");
  l->setDisplayValue(1, "Expand by 10");
  l->setDisplayValue(2, "Expand by 100");
  o->addParameter(0, d);
  o->addParameter(1, l);
  settings["X output settings"] = *o;
  
  
  o = new Option("Y Output ", "OEXP 2,%f,%d", "OEXP? 2");
  d = new DoubleParameter("Offset", "%", -105, 105);
  l = new ListParameter("Expand", "-", 0, 2);
  l->setDisplayValue(0, "No Expand");
  l->setDisplayValue(1, "Expand by 10");
  l->setDisplayValue(2, "Expand by 100");
  o->addParameter(0, d);
  o->addParameter(1, l);
  settings["Y output settings"] = *o;
  
  
  o = new Option("R Output ", "OEXP 2,%f,%d", "OEXP? 2");
  d = new DoubleParameter("Offset", "%", -105, 105);
  l = new ListParameter("Expand", "-", 0, 2);
  l->setDisplayValue(0, "No Expand");
  l->setDisplayValue(1, "Expand by 10");
  l->setDisplayValue(2, "Expand by 100");
  o->addParameter(0, d);
  o->addParameter(1, l);
  settings["R output settings"] = *o;
  
  o = new Option("", "AUXV 1,%f", "AUXV? 1");
  d = new DoubleParameter("Aux Output 1 ", "V", -10.5, 10.5);
  o->addParameter(0, d);
  settings["Aux Out 1"] = *o;
  
  o = new Option("", "AUXV 2,%f", "AUXV? 2");
  d = new DoubleParameter("Aux Output 2 ", "V", -10.5, 10.5);
  o->addParameter(0, d);
  settings["Aux Out 2"] = *o;
  
  o = new Option("", "AUXV 3,%f", "AUXV? 3");
  d = new DoubleParameter("Aux Output 3 ", "V", -10.5, 10.5);
  o->addParameter(0, d);
  settings["Aux Out 3"] = *o;
  
  o = new Option("", "AUXV 4,%f", "AUXV? 4");
  d = new DoubleParameter("Aux Output 4 ", "V", -10.5, 10.5);
  o->addParameter(0, d);
  settings["Aux Out 4"] = *o;
  
  o = new Option("", "SRAT %d", "SRAT?");
  l = new ListParameter("Data Storage Sample Rate", "-", 0, 14);
  l->setDisplayValue(0, "62.5 mHz");
  l->setDisplayValue(1, "125 mHz");
  l->setDisplayValue(2, "250 mHz");
  l->setDisplayValue(3, "500 mHz");
  l->setDisplayValue(4, "1 Hz");
  l->setDisplayValue(5, "2 Hz");
  l->setDisplayValue(6, "4 Hz");
  l->setDisplayValue(7, "8 Hz");
  l->setDisplayValue(8, "16 Hz");
  l->setDisplayValue(9, "32 Hz");
  l->setDisplayValue(10, "64 Hz");
  l->setDisplayValue(11, "128 Hz");
  l->setDisplayValue(12, "256 Hz");
  l->setDisplayValue(13, "512 Hz");
  l->setDisplayValue(14, "Trigger");
  o->addParameter(0, l);
  settings["Data Storage Sample Rate"] = *o;
  
  o = new Option("", "SEND %d", "SEND?");
  l = new ListParameter("End of Buffer Mode", "-", 0, 1);
  l->setDisplayValue(0, "1 Shot");
  l->setDisplayValue(1, "Loop");
  o->addParameter(0, l);
  settings["End of Buffer Mode"] = *o;
  
  o = new Option("", "TSTR %d", "TSTR?");
  l = new ListParameter("Data Storage Trigger Start Mode", "-", 0, 1);
  l->setDisplayValue(0, "Trigger Start Feature Off");
  l->setDisplayValue(1, "Trigger Starts the Scan");
  o->addParameter(0, l);
  settings["Data Storage Trigger Start Mode"] = *o;
}  
